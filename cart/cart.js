// cart/cart.js

/**
 * Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi trang load xong
 */
document.addEventListener('DOMContentLoaded', function () {
    // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
    const currentUserJson = localStorage.getItem('currentUser');
    if (!currentUserJson) {
        // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
        window.location.href = '../login/login.html';
        return;
    }

    loadData();
    loadHeader();
    loadFooter();

    // Hi·ªÉn th·ªã gi·ªè h√†ng
    renderCart();
});

/**
 * Hi·ªÉn th·ªã gi·ªè h√†ng
 */
function renderCart() {
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (!currentUser || !currentUser.id) {
        console.error("renderCart: Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng h·ª£p l·ªá.");
        window.location.href = '../login/login.html';
        return;
    }

    let cart = [];
    try {
        cart = JSON.parse(localStorage.getItem('cart')) || [];
    } catch (e) {
        console.error("renderCart: L·ªói khi l·∫•y d·ªØ li·ªáu gi·ªè h√†ng:", e);
        cart = [];
    }

    // L·ªçc c√°c item thu·ªôc v·ªÅ ng∆∞·ªùi d√πng hi·ªán t·∫°i
    const userCartItems = cart.filter(item => item.userId == currentUser.id);

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng tr√™n giao di·ªán
    const itemCountElement = document.getElementById('item-count');
    const totalItemsElement = document.getElementById('total-items');
    const subtotalElement = document.getElementById('subtotal');
    const totalPriceElement = document.getElementById('total-price');

    // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, hi·ªÉn th·ªã th√¥ng b√°o
    const cartItemContainer = document.getElementById('cart-item-list');
    if (userCartItems.length === 0) {
        cartItemContainer.innerHTML = '<p>Gi·ªè h√†ng c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng.</p>';
        if (itemCountElement) itemCountElement.textContent = '0';
        if (totalItemsElement) totalItemsElement.textContent = '0';
        if (subtotalElement) subtotalElement.textContent = '0 VND';
        if (totalPriceElement) totalPriceElement.textContent = '0 VND';
        return;
    }

    // T√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
    let subtotal = 0;
    userCartItems.forEach(item => {
        // ƒê·∫£m b·∫£o gi√° v√† s·ªë l∆∞·ª£ng l√† s·ªë h·ª£p l·ªá
        const price = parseFloat(item.price) || 0;
        const quantity = parseInt(item.quantity) || 0;
        subtotal += price * quantity;
    });

    // T√≠nh t·ªïng c·ªông (t·∫°m t√≠nh + ph√≠ v·∫≠n chuy·ªÉn)
    const shippingCost = 25000; // Gi·∫£ s·ª≠ ph√≠ v·∫≠n chuy·ªÉn c·ªë ƒë·ªãnh
    const totalPrice = subtotal + shippingCost;

    // C·∫≠p nh·∫≠t c√°c ph·∫ßn t·ª≠ tr√™n giao di·ªán
    if (itemCountElement) itemCountElement.textContent = userCartItems.length;
    if (totalItemsElement) totalItemsElement.textContent = userCartItems.length;
    if (subtotalElement) subtotalElement.textContent = formatCurrency(subtotal);
    if (totalPriceElement) totalPriceElement.textContent = formatCurrency(totalPrice);

    // Render danh s√°ch s·∫£n ph·∫©m
    let cartHTML = '';
    userCartItems.forEach(item => {
        // T√¨m s·∫£n ph·∫©m t·ª´ danh s√°ch s·∫£n ph·∫©m ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt
        let products = [];
        try {
            products = JSON.parse(localStorage.getItem('products')) || [];
        } catch (e) {
            console.error("renderCart: L·ªói khi l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m:", e);
        }
        const product = products.find(p => p.id == item.productId);
        if (!product) {
            console.warn("renderCart: Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m v·ªõi ID:", item.productId);
            return; // B·ªè qua item n√†y n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
        }

        // L·∫•y ƒë∆°n v·ªã ƒë√£ ch·ªçn
        const selectedUnit = product.units.find(u => u.name === item.unit);
        if (!selectedUnit) {
            console.warn("renderCart: Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã s·∫£n ph·∫©m:", item.unit, "cho s·∫£n ph·∫©m ID:", item.productId);
            return; // B·ªè qua item n√†y n·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã
        }

        // T√≠nh th√†nh ti·ªÅn cho s·∫£n ph·∫©m n√†y
        const itemTotal = selectedUnit.price * item.quantity;

        // --- QUAN TR·ªåNG: S·ª≠ d·ª•ng item.id cho data-item-id ---
        cartHTML += `
            <div class="cart-item" data-item-id="${item.id}">
                <div class="cart-item-image">
                    <img src="../${product.image || 'https://placehold.co/80x80?text=No+Image'}" alt="${product.name}">
                </div>
                <div class="cart-item-info">
                    <h3>${product.name}</h3>
                    <div class="unit">ƒê∆°n v·ªã: ${item.unit} (${selectedUnit.description || ''})</div>
                    <div class="price">${formatCurrency(selectedUnit.price)}</div>
                </div>
                <div class="quantity-control">
                    <button class="decrease-qty" data-item-id="${item.id}">-</button>
                    <input type="number" value="${item.quantity}" min="1" data-item-id="${item.id}" class="quantity-input">
                    <button class="increase-qty" data-item-id="${item.id}">+</button>
                </div>
                <div class="item-price">${formatCurrency(itemTotal)}</div>
                <div class="remove-item" data-item-id="${item.id}">üóëÔ∏è X√≥a</div>
            </div>
        `;
    });
    cartItemContainer.innerHTML = cartHTML;

    // --- G·∫Øn s·ª± ki·ªán cho t·∫•t c·∫£ c√°c n√∫t "TƒÉng", "Gi·∫£m" v√† "X√≥a" ---
    // S·ª≠ d·ª•ng Event Delegation ƒë·ªÉ x·ª≠ l√Ω s·ª± ki·ªán cho c√°c ph·∫ßn t·ª≠ ƒë∆∞·ª£c t·∫°o ƒë·ªông
    const cartContainer = document.querySelector('.cart-container');
    if (cartContainer) {
        cartContainer.addEventListener('click', function(e) {
            // T√¨m ph·∫ßn t·ª≠ cha .cart-item g·∫ßn nh·∫•t ƒë·ªÉ l·∫•y data-item-id
            const cartItemElement = e.target.closest('.cart-item');
            if (!cartItemElement) return;

            const itemId = cartItemElement.dataset.itemId;
            if (!itemId) {
                console.error("renderCart EventListener: Kh√¥ng t√¨m th·∫•y data-item-id tr√™n ph·∫ßn t·ª≠ .cart-item");
                return;
            }

            if (e.target.classList.contains('decrease-qty')) {
                updateQuantity(itemId, -1);
            } else if (e.target.classList.contains('increase-qty')) {
                updateQuantity(itemId, 1);
            } else if (e.target.classList.contains('remove-item')) {
                removeFromCart(itemId);
            }
        });
    } else {
        console.error("renderCart: Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ .cart-container ƒë·ªÉ g·∫Øn s·ª± ki·ªán.");
    }

    // G·∫Øn s·ª± ki·ªán cho n√∫t "Ti·∫øn h√†nh thanh to√°n"
    const checkoutBtn = document.getElementById('checkout-btn');
    if (checkoutBtn) {
        checkoutBtn.addEventListener('click', function() {
            alert("Ch·ª©c nƒÉng thanh to√°n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.");
        });
    }

    // G·∫Øn s·ª± ki·ªán cho n√∫t "Ti·∫øp t·ª•c mua h√†ng"
    const continueShoppingBtn = document.getElementById('continue-shopping-btn');
    if (continueShoppingBtn) {
        continueShoppingBtn.addEventListener('click', function() {
            window.location.href = '../index.html';
        });
    }
}

/**
 * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
 * @param {string} itemId - ID c·ªßa M·ª§C trong gi·ªè h√†ng (d∆∞·ªõi d·∫°ng chu·ªói)
 * @param {number} delta - S·ªë l∆∞·ª£ng c·∫ßn thay ƒë·ªïi (+1, -1)
 */
function updateQuantity(itemId, delta) {
    if (!itemId) {
        console.error("updateQuantity: Thi·∫øu itemId");
        return;
    }
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (!currentUser || !currentUser.id) {
        console.error("updateQuantity: Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p");
        window.location.href = '../login/login.html';
        return;
    }

    let cart = [];
    try {
        cart = JSON.parse(localStorage.getItem('cart')) || [];
    } catch (e) {
        console.error("updateQuantity: L·ªói khi l·∫•y gi·ªè h√†ng:", e);
        return;
    }

    // --- ƒê√É S·ª¨A: T√¨m item d·ª±a tr√™n item.id ---
    const itemIndex = cart.findIndex(item => item.id == itemId && item.userId == currentUser.id);

    if (itemIndex > -1) {
        const item = cart[itemIndex];
        const newQuantity = item.quantity + delta;

        if (delta === -1 && newQuantity < 1) {
            // N·∫øu gi·∫£m xu·ªëng d∆∞·ªõi 1, c√≥ th·ªÉ xem nh∆∞ x√≥a ho·∫∑c gi·ªØ nguy√™n ·ªü 1
            // ·ªû ƒë√¢y, ch√∫ng ta s·∫Ω kh√¥ng cho gi·∫£m xu·ªëng d∆∞·ªõi 1
            console.log("S·ªë l∆∞·ª£ng kh√¥ng th·ªÉ nh·ªè h∆°n 1");
            return;
        }

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        cart[itemIndex].quantity = newQuantity;

        // L∆∞u l·∫°i v√†o localStorage
        try {
            localStorage.setItem('cart', JSON.stringify(cart));
            // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
            renderCart();
        } catch (e) {
            console.error("updateQuantity: L·ªói khi l∆∞u gi·ªè h√†ng:", e);
        }
    } else {
        console.warn("updateQuantity: Kh√¥ng t√¨m th·∫•y item v·ªõi ID:", itemId, "cho user:", currentUser.id);
    }
}

/**
 * X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
 * @param {string} itemId - ID c·ªßa M·ª§C trong gi·ªè h√†ng (d∆∞·ªõi d·∫°ng chu·ªói)
 */
function removeFromCart(itemId) {
    if (!itemId) {
        console.error("removeFromCart: Thi·∫øu itemId");
        return;
    }
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (!currentUser || !currentUser.id) {
        console.error("removeFromCart: Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p");
        window.location.href = '../login/login.html';
        return;
    }

    let cart = [];
    try {
        cart = JSON.parse(localStorage.getItem('cart')) || [];
    } catch (e) {
        console.error("removeFromCart: L·ªói khi l·∫•y gi·ªè h√†ng:", e);
        return;
    }

    // --- ƒê√É S·ª¨A: L·ªçc item d·ª±a tr√™n item.id ---
    const newCart = cart.filter(item => {
        // Gi·ªØ l·∫°i item n·∫øu:
        // 1. N√≥ kh√¥ng thu·ªôc v·ªÅ ng∆∞·ªùi d√πng hi·ªán t·∫°i, ho·∫∑c
        // 2. N√≥ thu·ªôc v·ªÅ ng∆∞·ªùi d√πng hi·ªán t·∫°i nh∆∞ng ID kh√¥ng kh·ªõp v·ªõi itemId c·∫ßn x√≥a
        return !(item.userId == currentUser.id && item.id == itemId);
    });

    // Ki·ªÉm tra xem c√≥ item n√†o b·ªã x√≥a kh√¥ng
    if (newCart.length === cart.length) {
        console.warn("removeFromCart: Kh√¥ng t√¨m th·∫•y item v·ªõi ID:", itemId, "ƒë·ªÉ x√≥a cho user:", currentUser.id);
        return; // Kh√¥ng c√≥ g√¨ thay ƒë·ªïi
    }

    // L∆∞u l·∫°i gi·ªè h√†ng m·ªõi v√†o localStorage
    try {
        localStorage.setItem('cart', JSON.stringify(newCart));
        console.log("removeFromCart: Item v·ªõi ID", itemId, "ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng c·ªßa user", currentUser.id);
        // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
        renderCart();
    } catch (e) {
        console.error("removeFromCart: L·ªói khi l∆∞u gi·ªè h√†ng m·ªõi:", e);
    }
}


/**
 * H√†m ti·ªán √≠ch: ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá
 */
function formatCurrency(amount) {
    // Ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
    if (typeof amount !== 'number' || isNaN(amount)) {
        return '0 VND'; // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu l·ªói
    }
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
}